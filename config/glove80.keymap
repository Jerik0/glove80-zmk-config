/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <400>;
            require-prior-idle-ms = <400>;
            flavor = "tap-preferred";
        };

        cust_hold_tap: cust_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CUST_HOLD_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
            quick-tap-ms = <400>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        dup_line: dup_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_CONTROL &kp D>;
            label = "DUP_LINE";
        };

        new_line: new_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LC(LEFT_SHIFT) &kp ENTER>;
            label = "NEW_LINE";
        };

        go_to_declaration: go_to_declaration {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_CONTROL &kp B>;
            label = "GO_TO_DECLARATION";
        };

        pwd: pwd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(J) &kp J &kp C &kp N0 &kp N1 &kp D &kp E &kp C &kp EXCL &kp AT &kp EXCL &kp AT>;
            label = "PWD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2    &kp F3   &kp F4              &kp F5                                                                                                             &kp F6  &kp F7     &kp F8    &kp F9    &kp F10
&kp EQUAL   &kp N1    &kp N2   &kp N3              &kp N4     &kp N5                                                                                          &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp ESCAPE  &kp Q     &kp W    &cust_hold_tap 3 E  &kp R      &kp T                                                                                           &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp TAB     &kp A     &kp S    &kp D               &lt 4 F    &kp G                                                                                           &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&kp GRAVE   &kp Z     &kp X    &kp C               &kp V      &kp B   &kp DELETE      &kp LCTRL      &layer_td  &kp LGUI  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp PG_UP
&magic 2 0  &kp HOME  &kp END  &kp LEFT            &kp RIGHT          &kp LEFT_SHIFT  &kp BACKSPACE  &kp LALT   &kp RALT  &kp RET          &kp SPACE                  &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

        gaming_layer {
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5                                                                                                     &kp F6      &kp F7        &kp F8         &none            &kp PAUSE_BREAK
&kp L       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                                                                      &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&kp ESCAPE  &kp G         &kp Q         &kp W         &kp E         &kp R                                                                             &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&kp TAB     &kp M         &kp A         &kp S         &kp D         &kp F                                                                             &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&kp T       &kp B         &kp Z         &kp X         &kp C         &kp V         &kp I           &kp LCTRL  &to 0         &trans  &trans     &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans      &kp H         &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8                &kp LEFT_SHIFT  &kp SPACE  &kp LEFT_ALT  &trans  &kp ENTER  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        num-pad {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                     &trans        &trans        &trans        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                     &trans  &trans        &trans        &trans        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                     &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                     &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &kp ENTER  &trans          &kp KP_PLUS   &kp KP_MINUS  &trans        &trans  &trans
            >;
        };

        coding-layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                                               &trans                &trans          &trans                 &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                                               &trans  &trans                &trans          &trans                 &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                                               &trans  &kp LEFT_PARENTHESIS  &kp UP_ARROW    &kp RIGHT_PARENTHESIS  &trans    &trans
&trans  &trans  &trans  &pwd    &trans  &trans                                                                               &trans  &kp LEFT              &kp DOWN_ARROW  &kp RIGHT              &kp END   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &dup_line       &new_line           &trans     &trans  &trans     &trans     &trans  &kp LEFT_BRACKET      &trans          &kp RIGHT_BRACKET      &kp HOME  &trans
&trans  &trans  &trans  &trans  &trans          &kp LEFT_SHIFT  &go_to_declaration  &new_line  &trans  &kp ENTER  &kp SPACE          &trans                &trans          &trans                 &trans    &trans
            >;
        };
    };
};
